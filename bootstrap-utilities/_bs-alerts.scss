@use 'sass:math';
$alerts-icons-stroke-width: null !default; // null: usa fill, altrimenti spessore traccia

.alert {
  h2 {
    position: relative;
    top: -5px;
    margin-top: 0;
    //@extend .h3;
  }

  > p {
    &:last-child {
      margin-bottom: 0;
    }
  }

  .alert-link, a {
    &:not(.btn) {
      font-weight: $body-font-weight-semibold;
      text-decoration: underline;
    }
  }
}

.alert-link, a {
  @each $theme in danger, warning, info, success {
    @if map-has-key($theme-colors, $theme) {
      .alert-#{$theme} & {
        color: darken(map-get($theme-colors, $theme), 10);
      }
    }
  }
}

.alert-dismissible {
  padding-right: 3rem;
}


.alert-icon {
  position: relative;
  min-height: 3em;
  padding-left: 4em;

  &::before {
    position: absolute;
    top: math.div($alert-padding-y, 1.5);
    left: math.div($alert-padding-x, 1.5);
    display: block;
    width: 2em;
    height: 2em;
  }

  @each $theme in danger, warning, info, success {
    @if map-has-key($theme-colors, $theme) and
      global-variable-exists('ui-icons') and
      map-has-key($ui-icons, $theme) {

      &.alert-#{$theme} {
        /* stylelint-disable max-nesting-depth  */
        &::before {
          @if $alerts-icons-stroke-width == null {
            content:
              svg_uri(
                str-replace(
                  map-get($ui-icons, $theme),
                  '<svg',
                  '<svg fill="#{map-get($theme-colors, $theme)}" stroke="none"'
                )
              );
          } @else {
            content:
              svg_uri(
                str-replace(
                  map-get($ui-icons, $theme),
                  '<svg',
                  '<svg stroke="#{map-get($theme-colors, $theme)}" stroke-width="#{$alerts-icons-stroke-width}" fill="none"'
                )
              );
          }
        }
        /* stylelint-enable max-nesting-depth  */
      }
    }
  }
}

